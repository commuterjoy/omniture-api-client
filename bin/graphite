#!/usr/bin/ruby 

require 'lib/omniture'
require 'lib/graphite'
require 'trollop'
require 'date'
require 'json'

args = Trollop::options do
    opt :host,        "Graphite host - Eg. graphite.guprod.gnl",                                 :type => :string
    opt :path,        "Prefix for all your metrics",                                             :type => :string
    opt :buffer,      "Number of hours buffer you want to wait for Omniture to report the data", :type => :int, :default => 6 
    opt :data,        "Data link names",                                                         :type => :string
    opt :kpis,        "Log page views / visitors / visits",                                      :type => :boolean
    opt :from,        "From (days)",                                                             :type => :int, :default => 30 
    opt :to,          "To (days)",                                                               :type => :int, :default => 0
    opt :granularity, "Granularity",                                                             :type => :string, :default => 'day'
    opt :segment,     "Segment",                                                                 :type => :string 
    opt :key,         "Key",                                                                     :type => :string 
    opt :element,     "Element",                                                                 :type => :string, :default => 'evar37'  
    opt :metric,      "Metric",                                                                  :type => :string, :default => 'event37'
    opt :suite,       "Report suite id",                                                         :type => :string, :default => 'guardiangu-frontend'
end

def days_from_today(n)
    (Date.today - n).strftime('%Y-%m-%d') 
end

def generate_report(from, to, granularity, evars, segment, metric, element_id, suite)
   Report.new().queueTrended(
    {
      :from => days_from_today(from),
      :to => days_from_today(to),
      :segment => segment,
      :metric => metric,
      :element_id => element_id,
      :granularity => granularity,
      :evars => evars,
      :report_suite => suite
    })
end

def has_report_finished(id)
    JSON.parse(Report.new().getReportQueue()).map { |item|
        item['report_id'].to_i
    }.include? id
end

def generate_kpi_report(from, granularity, segment, suite)
    Report.new().queueQueueOvertime(
      {
        :date => days_from_today(from),
        :metrics => ['pageViews', 'visits', 'visitors'],
        :granularity => granularity,
        :segment => segment,
        :report_suite => suite
      })
end

# keys are of the form 'omniture.v003.social-twitter.metric.segment'
def make_omniture_key(metric, args)
    path = [
        args[:path].split('.'),
        'omniture',
        'v003',
    ]
    path.push(args[:key]) if args[:key] 
    path.push(metric[:title].split("|").map{|m|m.gsub(/[\s.]/,'')}.join('-').downcase)
    path.push(args[:segment].gsub(/[ ], '-'/)) if args[:segment]
    path
end

# ---

def log_to_graphite(report_id, args)
    graphite = Graphite.new({
            :host => args[:host],
            :verbose => true
        })
    report = Report.new().to_ganglia(report_id, args[:buffer])
    
    if args[:kpis]
        report['metrics'] = report['metrics'].pop(3) # FIXME hack  
    end

    report['metrics'].each { |metric|
        path = make_omniture_key(metric, args)
        graphite.log({
                :path => path.join('.'),
                :value => metric[:breakdown][:value],
                :time => metric[:breakdown][:time].to_i
        })
    }
end


# ---


if args[:kpis]
    report = generate_kpi_report(args[:from], args[:granularity], args[:segment], args[:suite])
else
    report = generate_report(args[:from], args[:to], args[:granularity], args[:data].split(","), args[:segment], args[:metric], args[:element], args[:suite])
end

report_as_json = JSON.parse(report)

unless report_as_json['statusMsg'] == 'Your report has been queued' 
    puts report.inspect
    raise "Report did not generate"
    exit 1
end

report_id = report_as_json['reportID']

puts "report requested ... #{report_id}"

loop do
    break unless has_report_finished(report_id)
    sleep 5
end

puts "report generated ... #{report_id}"

log_to_graphite(report_id, args)
